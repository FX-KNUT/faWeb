[{"D:\\Project\\fxWeb\\src\\index.tsx":"1","D:\\Project\\fxWeb\\src\\reportWebVitals.ts":"2","D:\\Project\\fxWeb\\src\\components\\App.tsx":"3","D:\\Project\\fxWeb\\src\\components\\Header.js":"4","D:\\Project\\fxWeb\\src\\components\\Router.js":"5","D:\\Project\\fxWeb\\src\\components\\Reducer.ts":"6","D:\\Project\\fxWeb\\src\\components\\Home.js":"7","D:\\Project\\fxWeb\\src\\components\\Profile.js":"8","D:\\Project\\fxWeb\\src\\components\\Location.js":"9","D:\\Project\\fxWeb\\src\\components\\Community.js":"10","D:\\Project\\fxWeb\\src\\components\\Introduction.js":"11","D:\\Project\\fxWeb\\src\\components\\Login.tsx":"12","D:\\Project\\fxWeb\\src\\components\\NotFound.js":"13","D:\\Project\\fxWeb\\src\\components\\ProfileList.js":"14","D:\\Project\\fxWeb\\src\\components\\Pagination.js":"15","D:\\Project\\fxWeb\\src\\components\\ProfilePage.js":"16"},{"size":741,"mtime":1624377338965,"results":"17","hashOfConfig":"18"},{"size":440,"mtime":1624375862814,"results":"19","hashOfConfig":"18"},{"size":1110,"mtime":1624375862805,"results":"20","hashOfConfig":"18"},{"size":1306,"mtime":1624777051329,"results":"21","hashOfConfig":"18"},{"size":750,"mtime":1624776941154,"results":"22","hashOfConfig":"18"},{"size":693,"mtime":1624375862808,"results":"23","hashOfConfig":"18"},{"size":740,"mtime":1624375862806,"results":"24","hashOfConfig":"18"},{"size":1313,"mtime":1624545141669,"results":"25","hashOfConfig":"18"},{"size":1728,"mtime":1624717364893,"results":"26","hashOfConfig":"18"},{"size":1588,"mtime":1624375862805,"results":"27","hashOfConfig":"18"},{"size":1768,"mtime":1624375862807,"results":"28","hashOfConfig":"18"},{"size":5045,"mtime":1624375862807,"results":"29","hashOfConfig":"18"},{"size":184,"mtime":1624384505102,"results":"30","hashOfConfig":"18"},{"size":2776,"mtime":1624548147999,"results":"31","hashOfConfig":"18"},{"size":857,"mtime":1624549474517,"results":"32","hashOfConfig":"18"},{"size":348,"mtime":1624547400640,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"16jotrf",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"D:\\Project\\fxWeb\\src\\index.tsx",[],["70","71"],"D:\\Project\\fxWeb\\src\\reportWebVitals.ts",[],"D:\\Project\\fxWeb\\src\\components\\App.tsx",[],"D:\\Project\\fxWeb\\src\\components\\Header.js",[],"D:\\Project\\fxWeb\\src\\components\\Router.js",[],"D:\\Project\\fxWeb\\src\\components\\Reducer.ts",[],"D:\\Project\\fxWeb\\src\\components\\Home.js",[],["72","73"],"D:\\Project\\fxWeb\\src\\components\\Profile.js",[],"D:\\Project\\fxWeb\\src\\components\\Location.js",["74"],"import { useEffect } from \"react\";\r\nimport { store } from \"./App.tsx\";\r\nconst { kakao } = window;\r\n\r\nconst Location = () => {\r\n  /**\r\n   * const [center, setCenter] = useState();\r\n   */\r\n\r\n  const center = [36.96911947843944, 127.8696547175743];\r\n\r\n  let lat = center[0];\r\n  let lon = center[1];\r\n\r\n  useEffect(() => {\r\n    let container = document.getElementById(\"map\");\r\n    let options = {\r\n      center: new kakao.maps.LatLng(lat, lon),\r\n      level: 3,\r\n    };\r\n\r\n    const map = new window.kakao.maps.Map(container, options);\r\n\r\n    let markerPosition = new kakao.maps.LatLng(lat, lon);\r\n    let marker = new kakao.maps.Marker({\r\n      position: markerPosition,\r\n    });\r\n\r\n    marker.setMap(map);\r\n  }, []);\r\n\r\n  store.dispatch({ type: { loc: \"location\" } });\r\n  // Google Map API는 유료이지만, Kakao API를 사용하면 무료입니다.\r\n  // 동시에 아주 간단하게 구현할 수 있습니다.\r\n  // 백엔드 단에서 로직을 구현하여 정보를 받아올지,\r\n  // 프론트엔드 단에서 로직을 구현하여 직접 띄울지 회의해보세요.\r\n  // 백엔드 단의 사람이 더 많다면 백엔드 쪽에서 위도와 경도를 얻어서\r\n  // 전달하고 프론트엔드 단에서 위도와 경도를 기반으로 위치를 보여주는 것도\r\n  // 분명히 비효율적인 방법이지만 엄연히 데이터 통신을 하는 것이므로\r\n  // 그 과정속에 REST API 통신, 외부 API 사용을 통한 CORS 등의 이해를\r\n  // 얻게 될 겁니다.\r\n  return (\r\n    <div className=\"main-location-wrapper\">\r\n      <div className=\"main-location-content\">\r\n        <div id=\"map\" className=\"main-location-map\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Location;\r\n","D:\\Project\\fxWeb\\src\\components\\Community.js",[],"D:\\Project\\fxWeb\\src\\components\\Introduction.js",[],"D:\\Project\\fxWeb\\src\\components\\Login.tsx",[],"D:\\Project\\fxWeb\\src\\components\\NotFound.js",[],"D:\\Project\\fxWeb\\src\\components\\ProfileList.js",["75"],"import { useState } from \"react\";\r\nimport { store } from \"./App.tsx\";\r\nimport Pagination from \"./Pagination\";\r\n\r\nimport ProfilePage from \"./ProfilePage\";\r\nimport shine from \"./res/image/shine.png\";\r\n\r\nconst profileList = [\r\n  {\r\n    idx: 0,\r\n    id: \"1234567\",\r\n    name: \"김김김\",\r\n    img: shine,\r\n    start_date: \"2021-01-01\",\r\n    end_date: \"2021-12-31\",\r\n  },\r\n  {\r\n    idx: 1,\r\n    id: \"1234567\",\r\n    name: \"s\",\r\n    img: shine,\r\n    start_date: \"2021-01-01\",\r\n    end_date: \"2021-12-31\",\r\n  },\r\n  {\r\n    idx: 2,\r\n    id: \"1234567\",\r\n    name: \"a\",\r\n    img: shine,\r\n    start_date: \"2021-01-01\",\r\n    end_date: \"2021-12-31\",\r\n  },\r\n  {\r\n    idx: 3,\r\n    id: \"1234567\",\r\n    name: \"r\",\r\n    img: shine,\r\n    start_date: \"2021-01-01\",\r\n    end_date: \"2021-12-31\",\r\n  },\r\n  {\r\n    idx: 4,\r\n    id: \"1234567\",\r\n    name: \"e\",\r\n    img: shine,\r\n    start_date: \"2021-01-01\",\r\n    end_date: \"2021-12-31\",\r\n  },\r\n  {\r\n    idx: 5,\r\n    id: \"1234567\",\r\n    name: \"w\",\r\n    img: shine,\r\n    start_date: \"2021-01-01\",\r\n    end_date: \"2021-12-31\",\r\n  },\r\n  {\r\n    idx: 6,\r\n    id: \"1234567\",\r\n    name: \"q\",\r\n    img: shine,\r\n    start_date: \"2021-01-01\",\r\n    end_date: \"2021-12-31\",\r\n  },\r\n];\r\n\r\nconst ProfileList = () => {\r\n  store.dispatch({ type: { loc: \"profile\" } });\r\n\r\n  // pagination 관련\r\n  const maxProfileList = 6; // 한 페이지에서 보여줄 최대 profile 개수\r\n  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지\r\n  const [loading, setLoading] = useState(false); // 서버에서 ProfileList를 가져올 때 loading을 하고 있냐 아니냐\r\n  const indexOfLast = currentPage * maxProfileList; // 현재 페이지에서 있을 수 있는 마지막 index\r\n  const indexOfFirst = indexOfLast - maxProfileList; // 현재 페이지에서 있을 수 있는 처음 index\r\n  const currProfileList = (tmp) => {\r\n    // 페이지에 맞는 Profile을 보여준다.\r\n    const currProfile = tmp.slice(indexOfFirst, indexOfLast);\r\n    return currProfile;\r\n  };\r\n  // arr의 map 함수 내 _는 ele 인자를 사용하지 않겠다는 것을\r\n  // 암시적으로 나타내는 minify입니다. 일종의 convention이니,\r\n  // 익혀두시면 다음에 다른 코드를 볼 때 또 보실 일이 있을 겁니다.\r\n\r\n  return (\r\n    <div className=\"main-profile-wrapper\">\r\n      {/* {loading && <div>loading...</div>} */}\r\n      {/** 나중에 profileList를 받아올 때 대비 */}\r\n      <div>\r\n        <ProfilePage\r\n          currProfileList={currProfileList(profileList)}\r\n          loading={loading}\r\n        />\r\n      </div>\r\n      <Pagination\r\n        maxProfileList={maxProfileList}\r\n        totalProfile={profileList.length}\r\n        setCurrentPage={setCurrentPage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileList;\r\n","D:\\Project\\fxWeb\\src\\components\\Pagination.js",[],"D:\\Project\\fxWeb\\src\\components\\ProfilePage.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":30,"column":6,"nodeType":"82","endLine":30,"endColumn":8,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":73,"column":19,"nodeType":"86","messageId":"87","endLine":73,"endColumn":29},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'lat' and 'lon'. Either include them or remove the dependency array.","ArrayExpression",["90"],"no-unused-vars","'setLoading' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [lat, lon]",{"range":"93","text":"94"},[710,712],"[lat, lon]"]