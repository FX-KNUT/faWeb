{"ast":null,"code":"// import { useState } from 'react';\n// // import { SERVERURL, SERVERPORT } from './Constants';\n// // import axios from 'axios';\n// // 백엔드와 교환할 데이터에 대한 정보를 인터페이스에 즉각 메모하세요.\n// // 이것 또한 협업과정에서 타입스크립트가 가져다 주는 큰 장점들 중 하나입니다.\n// // interface User { // 받는 유저 정보의 스키마\n// // }\n// // interface UserDTO { // 보내는 유저 정보의 스키마\n// // }\n// const Login = (): JSX.Element => {\n//     // destructuring에 따른 Typing 방법\n//     let [id, setId]: [ id: string, setId: Function] = useState('');\n//     let [pw, setPw]: [ pw: string, setPw: Function] = useState('');\n//     // Union Type, | 를 사용하여 이 타입 중 하나일 것임을 명시\n//     // HTMLElement의 경우 로딩 시점에 따라 null로 인식될 수 있으므로 null까지 포함해야 함\n//     const modal: HTMLElement | null = document.querySelector(\"#modal\");\n//     const login: HTMLElement | null = document.querySelector(\"#login\");\n//     const btnStyle = {  // 이런 객체엔 Typing하지 않아도 됩니다.\n//         color: \"white\",\n//         background: \"purple\",\n//         padding: \".375rem .75rem\",\n//         border: \"1px solid purple\",\n//         borderRadius: \".25rem\",\n//         fontSize: \"1rem\",\n//         lineHeight: 1.5\n//     };\n//     // 객체의 타입을 다 외울 필요 없습니다.\n//     // 아래의 onIDChange를 예로 들면, onIDChange 이벤트가 걸려있는\n//     // DOM에 마우스를 올려 해당 객체의 타입이 무엇인지 확인하면 쉽게 알 수 있습니다.\n//     const onIDChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n//         setId(e.target.value)\n//     };\n//     const onPasswordChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n//         setPw(e.target.value)\n//     };\n//     const onXClicked = (e: React.MouseEvent<HTMLButtonElement>): void => {\n//         e.preventDefault();\n//         modal?.classList.toggle(\"show\");\n//         login?.classList.toggle(\"show\");\n//     };\n//     // axios를 이렇게 사용하는 방법도 좋지만,\n//     // axios를 좀 더 날렵하게 custom하는 방법도 요긴하게 사용될 수 있습니다.\n//     // 소규모 프로젝트에선 상관 없지만, 큰 프로젝트에선 DRY한 코드를 위해\n//     // axios를 Hook처럼 커스텀하여 사용할 수 있습니다.\n//     // const requsetUserInfo = async (UserDTO: UserDTO) => {\n//     //     // axios를 하단 코드처럼 사용하지 않고\n//     //     // axios({ method: 'post', ... }) 처럼 사용해도 좋습니다.\n//     //     const res: User = \n//     //         await axios.get(`${SERVERURL}:${SERVERPORT}`, UserDTO);\n//     //     return res;\n//     // }\n//     // 패키지에 axios 설치 되어 있습니다. axios 사용하세요.\n//     // const onSubmit = (e: React.ChangeEvent<HTMLFormElement>): void => {\n//     //     e.preventDefault();\n//     //     const UserDTO: UserDTO = {\n//     //         id,\n//     //         pw\n//     //     }\n//     //     const res = requsetUserInfo(UserDTO);\n//     //     console.log(res);\n//     // }\n//     const onSubmit = (e: React.ChangeEvent<HTMLFormElement>): void => {\n//         e.preventDefault();\n//     }\n//     return (\n//         <div id=\"login-wrapper\">\n//             <form action=\"\" method=\"post\" onSubmit={onSubmit}>\n//                 <p id=\"login-header\" className=\"login-p\">로그인</p>\n//                 <button onClick={onXClicked} id=\"login-X_Btn\">X</button>\n//                 <p id=\"login-id\" className=\"login-p\">ID</p>\n//                 <input type=\"text\" value={id} className=\"login-input\" onChange={onIDChange} />    \n//                 <p id=\"login-pw\" className=\"login-p\">Password</p>\n//                 <input type=\"password\" name=\"\" id=\"\" className=\"login-input\" value={pw} onChange={onPasswordChange} />\n//                 <button id=\"login-submitBtn\" style={btnStyle} type=\"submit\">Sign In</button>\n//             </form>\n//         </div>\n//     );\n// }\n// export default Login;","map":{"version":3,"sources":["C:/Users/신이종/Desktop/Univ/OneDrive/2021. 1학기/fxsite/fxweb/src/components/Login.tsx"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import { useState } from 'react';\r\n// // import { SERVERURL, SERVERPORT } from './Constants';\r\n// // import axios from 'axios';\r\n\r\n// // 백엔드와 교환할 데이터에 대한 정보를 인터페이스에 즉각 메모하세요.\r\n// // 이것 또한 협업과정에서 타입스크립트가 가져다 주는 큰 장점들 중 하나입니다.\r\n// // interface User { // 받는 유저 정보의 스키마\r\n\r\n// // }\r\n\r\n// // interface UserDTO { // 보내는 유저 정보의 스키마\r\n\r\n// // }\r\n\r\n// const Login = (): JSX.Element => {\r\n\r\n//     // destructuring에 따른 Typing 방법\r\n//     let [id, setId]: [ id: string, setId: Function] = useState('');\r\n//     let [pw, setPw]: [ pw: string, setPw: Function] = useState('');\r\n\r\n//     // Union Type, | 를 사용하여 이 타입 중 하나일 것임을 명시\r\n//     // HTMLElement의 경우 로딩 시점에 따라 null로 인식될 수 있으므로 null까지 포함해야 함\r\n//     const modal: HTMLElement | null = document.querySelector(\"#modal\");\r\n//     const login: HTMLElement | null = document.querySelector(\"#login\");\r\n\r\n//     const btnStyle = {  // 이런 객체엔 Typing하지 않아도 됩니다.\r\n//         color: \"white\",\r\n//         background: \"purple\",\r\n//         padding: \".375rem .75rem\",\r\n//         border: \"1px solid purple\",\r\n//         borderRadius: \".25rem\",\r\n//         fontSize: \"1rem\",\r\n//         lineHeight: 1.5\r\n//     };\r\n\r\n//     // 객체의 타입을 다 외울 필요 없습니다.\r\n//     // 아래의 onIDChange를 예로 들면, onIDChange 이벤트가 걸려있는\r\n//     // DOM에 마우스를 올려 해당 객체의 타입이 무엇인지 확인하면 쉽게 알 수 있습니다.\r\n\r\n//     const onIDChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n//         setId(e.target.value)\r\n//     };\r\n\r\n//     const onPasswordChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n//         setPw(e.target.value)\r\n//     };\r\n\r\n//     const onXClicked = (e: React.MouseEvent<HTMLButtonElement>): void => {\r\n//         e.preventDefault();\r\n//         modal?.classList.toggle(\"show\");\r\n//         login?.classList.toggle(\"show\");\r\n//     };\r\n\r\n//     // axios를 이렇게 사용하는 방법도 좋지만,\r\n//     // axios를 좀 더 날렵하게 custom하는 방법도 요긴하게 사용될 수 있습니다.\r\n//     // 소규모 프로젝트에선 상관 없지만, 큰 프로젝트에선 DRY한 코드를 위해\r\n//     // axios를 Hook처럼 커스텀하여 사용할 수 있습니다.\r\n//     // const requsetUserInfo = async (UserDTO: UserDTO) => {\r\n//     //     // axios를 하단 코드처럼 사용하지 않고\r\n//     //     // axios({ method: 'post', ... }) 처럼 사용해도 좋습니다.\r\n//     //     const res: User = \r\n//     //         await axios.get(`${SERVERURL}:${SERVERPORT}`, UserDTO);\r\n//     //     return res;\r\n//     // }\r\n\r\n//     // 패키지에 axios 설치 되어 있습니다. axios 사용하세요.\r\n//     // const onSubmit = (e: React.ChangeEvent<HTMLFormElement>): void => {\r\n//     //     e.preventDefault();\r\n//     //     const UserDTO: UserDTO = {\r\n//     //         id,\r\n//     //         pw\r\n//     //     }\r\n//     //     const res = requsetUserInfo(UserDTO);\r\n//     //     console.log(res);\r\n//     // }\r\n\r\n//     const onSubmit = (e: React.ChangeEvent<HTMLFormElement>): void => {\r\n//         e.preventDefault();\r\n//     }\r\n\r\n//     return (\r\n//         <div id=\"login-wrapper\">\r\n//             <form action=\"\" method=\"post\" onSubmit={onSubmit}>\r\n//                 <p id=\"login-header\" className=\"login-p\">로그인</p>\r\n//                 <button onClick={onXClicked} id=\"login-X_Btn\">X</button>\r\n//                 <p id=\"login-id\" className=\"login-p\">ID</p>\r\n//                 <input type=\"text\" value={id} className=\"login-input\" onChange={onIDChange} />    \r\n//                 <p id=\"login-pw\" className=\"login-p\">Password</p>\r\n//                 <input type=\"password\" name=\"\" id=\"\" className=\"login-input\" value={pw} onChange={onPasswordChange} />\r\n//                 <button id=\"login-submitBtn\" style={btnStyle} type=\"submit\">Sign In</button>\r\n//             </form>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Login;"]},"metadata":{},"sourceType":"module"}