{"ast":null,"code":"import _slicedToArray from\"C:/Users/\\uC2E0\\uC774\\uC885/Desktop/Univ/OneDrive/2021. 1\\uD559\\uAE30/fxsite/fxweb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from'react';// import { SERVERURL, SERVERPORT } from './Constants';\n// import axios from 'axios';\n// 백엔드와 교환할 데이터에 대한 정보를 인터페이스에 즉각 메모하세요.\n// 이것 또한 협업과정에서 타입스크립트가 가져다 주는 큰 장점들 중 하나입니다.\n// interface User { // 받는 유저 정보의 스키마\n// }\n// interface UserDTO { // 보내는 유저 정보의 스키마\n// }\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Login=function Login(){// destructuring에 따른 Typing 방법\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),id=_useState2[0],setId=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),pw=_useState4[0],setPw=_useState4[1];// Union Type, | 를 사용하여 이 타입 중 하나일 것임을 명시\n// HTMLElement의 경우 로딩 시점에 따라 null로 인식될 수 있으므로 null까지 포함해야 함\nvar modal=document.querySelector(\"#modal\");var login=document.querySelector(\"#login\");// 굳이 Inline Style을 지정한다면 그나마 좀 더 괜찮게 하는 방법입니다.\nvar resetBtnStyle={// 이런 객체엔 Typing하지 않아도 됩니다.\ncolor:\"white\",background:\"blueviolet\",width:\"5rem\",padding:\".125rem .5rem\",border:\"1px solid white\",borderRadius:\".25rem\",fontSize:\"1rem\",lineHeight:1.5};var submitBtnStyle={// React Native에서 이 방식을 사용합니다.\ncolor:\"white\",background:\"purple\",width:\"5rem\",padding:\".125rem .875rem\",border:\"1px solid purple\",borderRadius:\".25rem\",fontSize:\"1rem\",lineHeight:1.5};var xBtnStyle={color:\"white\",background:\"#1E1F21\",padding:\".125rem .5rem\",border:\"1px solid silver\",borderRadius:\".25rem\",fontSize:\"1rem\",lineHeight:1.5};// 객체의 타입을 다 외울 필요 없습니다.\n// 아래의 onIDChange를 예로 들면, onIDChange 이벤트가 걸려있는\n// DOM에 마우스를 올려 해당 객체의 타입이 무엇인지 확인하면 쉽게 알 수 있습니다.\nvar onIDChange=function onIDChange(e){setId(e.target.value);};var onPasswordChange=function onPasswordChange(e){setPw(e.target.value);};var onXClicked=function onXClicked(e){e.preventDefault();modal===null||modal===void 0?void 0:modal.classList.toggle(\"show\");login===null||login===void 0?void 0:login.classList.toggle(\"show\");};var onResetClicked=function onResetClicked(e){setId('');setPw('');};// axios를 이렇게 사용하는 방법도 좋지만,\n// axios를 좀 더 날렵하게 custom하는 방법도 요긴하게 사용될 수 있습니다.\n// 소규모 프로젝트에선 상관 없지만, 큰 프로젝트에선 DRY한 코드를 위해\n// axios를 Hook처럼 커스텀하여 사용할 수 있습니다.\n// const requsetUserInfo = async (UserDTO: UserDTO) => {\n//     // axios를 하단 코드처럼 사용하지 않고\n//     // axios({ method: 'post', ... }) 처럼 사용해도 좋습니다.\n//     const res: User = \n//         await axios.get(`${SERVERURL}:${SERVERPORT}`, UserDTO);\n//     return res;\n// }\n// 패키지에 axios 설치 되어 있습니다. axios 사용하세요.\n// const onSubmit = (e: React.ChangeEvent<HTMLFormElement>): void => {\n//     e.preventDefault();\n//     const UserDTO: UserDTO = {\n//         id,\n//         pw\n//     }\n//     const res = requsetUserInfo(UserDTO);\n//     console.log(res);\n// }\nvar onSubmit=function onSubmit(e){e.preventDefault();};return/*#__PURE__*/_jsx(\"div\",{id:\"login-wrapper\",children:/*#__PURE__*/_jsxs(\"form\",{action:\"\",method:\"post\",onSubmit:onSubmit,children:[/*#__PURE__*/_jsx(\"p\",{id:\"login-header\",className:\"login-p\",children:\"\\uB85C\\uADF8\\uC778\"}),/*#__PURE__*/_jsx(\"button\",{onClick:onXClicked,style:xBtnStyle,id:\"login-X_Btn\",children:\"X\"}),/*#__PURE__*/_jsx(\"p\",{id:\"login-id\",className:\"login-p\",children:\"ID\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:id,className:\"login-input\",onChange:onIDChange}),/*#__PURE__*/_jsx(\"p\",{id:\"login-pw\",className:\"login-p\",children:\"Password\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",name:\"\",id:\"\",className:\"login-input\",value:pw,onChange:onPasswordChange}),/*#__PURE__*/_jsxs(\"div\",{id:\"login-bottomBtnDiv\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"login-resetBtn\",style:resetBtnStyle,onClick:onResetClicked,children:\"Reset\"}),/*#__PURE__*/_jsx(\"button\",{id:\"login-submitBtn\",style:submitBtnStyle,type:\"submit\",children:\"Sign In\"})]})]})});};export default Login;","map":{"version":3,"sources":["C:/Users/신이종/Desktop/Univ/OneDrive/2021. 1학기/fxsite/fxweb/src/components/Login.tsx"],"names":["useState","Login","id","setId","pw","setPw","modal","document","querySelector","login","resetBtnStyle","color","background","width","padding","border","borderRadius","fontSize","lineHeight","submitBtnStyle","xBtnStyle","onIDChange","e","target","value","onPasswordChange","onXClicked","preventDefault","classList","toggle","onResetClicked","onSubmit"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\n// import { SERVERURL, SERVERPORT } from './Constants';\r\n// import axios from 'axios';\r\n\r\n// 백엔드와 교환할 데이터에 대한 정보를 인터페이스에 즉각 메모하세요.\r\n// 이것 또한 협업과정에서 타입스크립트가 가져다 주는 큰 장점들 중 하나입니다.\r\n// interface User { // 받는 유저 정보의 스키마\r\n\r\n// }\r\n\r\n// interface UserDTO { // 보내는 유저 정보의 스키마\r\n\r\n// }\r\n\r\nconst Login = (): JSX.Element => {\r\n\r\n    // destructuring에 따른 Typing 방법\r\n    let [id, setId]: [ id: string, setId: Function] = useState('');\r\n    let [pw, setPw]: [ pw: string, setPw: Function] = useState('');\r\n\r\n    // Union Type, | 를 사용하여 이 타입 중 하나일 것임을 명시\r\n    // HTMLElement의 경우 로딩 시점에 따라 null로 인식될 수 있으므로 null까지 포함해야 함\r\n    const modal: HTMLElement | null = document.querySelector(\"#modal\");\r\n    const login: HTMLElement | null = document.querySelector(\"#login\");\r\n\r\n    // 굳이 Inline Style을 지정한다면 그나마 좀 더 괜찮게 하는 방법입니다.\r\n    const resetBtnStyle = {     // 이런 객체엔 Typing하지 않아도 됩니다.\r\n        color: \"white\",\r\n        background: \"blueviolet\",\r\n        width: \"5rem\",\r\n        padding: \".125rem .5rem\",\r\n        border: \"1px solid white\",\r\n        borderRadius: \".25rem\",\r\n        fontSize: \"1rem\",\r\n        lineHeight: 1.5\r\n    };\r\n\r\n    const submitBtnStyle = {    // React Native에서 이 방식을 사용합니다.\r\n        color: \"white\",\r\n        background: \"purple\",\r\n        width: \"5rem\",\r\n        padding: \".125rem .875rem\",\r\n        border: \"1px solid purple\",\r\n        borderRadius: \".25rem\",\r\n        fontSize: \"1rem\",\r\n        lineHeight: 1.5\r\n    };\r\n\r\n    const xBtnStyle = {\r\n        color: \"white\",\r\n        background: \"#1E1F21\",\r\n        padding: \".125rem .5rem\",\r\n        border: \"1px solid silver\",\r\n        borderRadius: \".25rem\",\r\n        fontSize: \"1rem\",\r\n        lineHeight: 1.5\r\n    };\r\n\r\n    // 객체의 타입을 다 외울 필요 없습니다.\r\n    // 아래의 onIDChange를 예로 들면, onIDChange 이벤트가 걸려있는\r\n    // DOM에 마우스를 올려 해당 객체의 타입이 무엇인지 확인하면 쉽게 알 수 있습니다.\r\n\r\n    const onIDChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setId(e.target.value);\r\n    };\r\n\r\n    const onPasswordChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setPw(e.target.value);\r\n    };\r\n\r\n    const onXClicked = (e: React.MouseEvent<HTMLButtonElement>): void => {\r\n        e.preventDefault();\r\n        modal?.classList.toggle(\"show\");\r\n        login?.classList.toggle(\"show\");\r\n    };\r\n\r\n    const onResetClicked = (e: React.MouseEvent<HTMLButtonElement>): void => {\r\n        setId('');\r\n        setPw('');\r\n    }\r\n\r\n    // axios를 이렇게 사용하는 방법도 좋지만,\r\n    // axios를 좀 더 날렵하게 custom하는 방법도 요긴하게 사용될 수 있습니다.\r\n    // 소규모 프로젝트에선 상관 없지만, 큰 프로젝트에선 DRY한 코드를 위해\r\n    // axios를 Hook처럼 커스텀하여 사용할 수 있습니다.\r\n    // const requsetUserInfo = async (UserDTO: UserDTO) => {\r\n    //     // axios를 하단 코드처럼 사용하지 않고\r\n    //     // axios({ method: 'post', ... }) 처럼 사용해도 좋습니다.\r\n    //     const res: User = \r\n    //         await axios.get(`${SERVERURL}:${SERVERPORT}`, UserDTO);\r\n    //     return res;\r\n    // }\r\n\r\n    // 패키지에 axios 설치 되어 있습니다. axios 사용하세요.\r\n    // const onSubmit = (e: React.ChangeEvent<HTMLFormElement>): void => {\r\n    //     e.preventDefault();\r\n    //     const UserDTO: UserDTO = {\r\n    //         id,\r\n    //         pw\r\n    //     }\r\n    //     const res = requsetUserInfo(UserDTO);\r\n    //     console.log(res);\r\n    // }\r\n\r\n    const onSubmit = (e: React.ChangeEvent<HTMLFormElement>): void => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div id=\"login-wrapper\">\r\n            <form action=\"\" method=\"post\" onSubmit={onSubmit}>\r\n                <p id=\"login-header\" className=\"login-p\">로그인</p>\r\n                <button onClick={onXClicked} style={xBtnStyle} id=\"login-X_Btn\">X</button>\r\n                <p id=\"login-id\" className=\"login-p\">ID</p>\r\n                <input type=\"text\" value={id} className=\"login-input\" onChange={onIDChange} />    \r\n                <p id=\"login-pw\" className=\"login-p\">Password</p>\r\n                <input type=\"password\" name=\"\" id=\"\" className=\"login-input\" value={pw} onChange={onPasswordChange} />\r\n                <div id=\"login-bottomBtnDiv\">\r\n                    <button id=\"login-resetBtn\" style={resetBtnStyle} onClick={onResetClicked}>Reset</button>\r\n                    <button id=\"login-submitBtn\" style={submitBtnStyle} type=\"submit\">Sign In</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}