{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC2E0\\uC774\\uC885\\\\Desktop\\\\Univ\\\\OneDrive\\\\2021. 1\\uD559\\uAE30\\\\fxsite\\\\fxweb\\\\src\\\\components\\\\Login.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; // import { SERVERURL, SERVERPORT } from './Constants';\n// import axios from 'axios';\n// 백엔드와 교환할 데이터에 대한 정보를 인터페이스에 즉각 메모하세요.\n// 이것 또한 협업과정에서 타입스크립트가 가져다 주는 큰 장점들 중 하나입니다.\n// interface User { // 받는 유저 정보의 스키마\n// }\n// interface UserDTO { // 보내는 유저 정보의 스키마\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  // destructuring에 따른 Typing 방법\n  let [id, setId] = useState('');\n  let [pw, setPw] = useState(''); // Union Type, | 를 사용하여 이 타입 중 하나일 것임을 명시\n  // HTMLElement의 경우 로딩 시점에 따라 null로 인식될 수 있으므로 null까지 포함해야 함\n\n  const modal = document.querySelector(\"#modal\");\n  const login = document.querySelector(\"#login\"); // 굳이 Inline Style을 지정한다면 그나마 좀 더 괜찮게 하는 방법입니다.\n\n  const submitBtnStyle = {\n    // 이런 객체엔 Typing하지 않아도 됩니다.\n    color: \"white\",\n    background: \"purple\",\n    padding: \".375rem .75rem\",\n    border: \"1px solid purple\",\n    borderRadius: \".25rem\",\n    fontSize: \"1rem\",\n    lineHeight: 1.5\n  };\n  const xBtnStyle = {\n    // React Native에서 이 방식을 사용합니다.\n    color: \"white\",\n    background: \"#1E1F21\",\n    padding: \".125rem .5rem\",\n    borderRadius: \".25rem\",\n    fontSize: \"1rem\",\n    lineHeight: 1.5\n  }; // 객체의 타입을 다 외울 필요 없습니다.\n  // 아래의 onIDChange를 예로 들면, onIDChange 이벤트가 걸려있는\n  // DOM에 마우스를 올려 해당 객체의 타입이 무엇인지 확인하면 쉽게 알 수 있습니다.\n\n  const onIDChange = e => {\n    setId(e.target.value);\n  };\n\n  const onPasswordChange = e => {\n    setPw(e.target.value);\n  };\n\n  const onXClicked = e => {\n    e.preventDefault();\n    modal === null || modal === void 0 ? void 0 : modal.classList.toggle(\"show\");\n    login === null || login === void 0 ? void 0 : login.classList.toggle(\"show\");\n  }; // axios를 이렇게 사용하는 방법도 좋지만,\n  // axios를 좀 더 날렵하게 custom하는 방법도 요긴하게 사용될 수 있습니다.\n  // 소규모 프로젝트에선 상관 없지만, 큰 프로젝트에선 DRY한 코드를 위해\n  // axios를 Hook처럼 커스텀하여 사용할 수 있습니다.\n  // const requsetUserInfo = async (UserDTO: UserDTO) => {\n  //     // axios를 하단 코드처럼 사용하지 않고\n  //     // axios({ method: 'post', ... }) 처럼 사용해도 좋습니다.\n  //     const res: User = \n  //         await axios.get(`${SERVERURL}:${SERVERPORT}`, UserDTO);\n  //     return res;\n  // }\n  // 패키지에 axios 설치 되어 있습니다. axios 사용하세요.\n  // const onSubmit = (e: React.ChangeEvent<HTMLFormElement>): void => {\n  //     e.preventDefault();\n  //     const UserDTO: UserDTO = {\n  //         id,\n  //         pw\n  //     }\n  //     const res = requsetUserInfo(UserDTO);\n  //     console.log(res);\n  // }\n\n\n  const onSubmit = e => {\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"login-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      method: \"post\",\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"login-header\",\n        className: \"login-p\",\n        children: \"\\uB85C\\uADF8\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onXClicked,\n        style: xBtnStyle,\n        id: \"login-X_Btn\",\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"login-id\",\n        className: \"login-p\",\n        children: \"ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: id,\n        className: \"login-input\",\n        onChange: onIDChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"login-pw\",\n        className: \"login-p\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"\",\n        id: \"\",\n        className: \"login-input\",\n        value: pw,\n        onChange: onPasswordChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"login-submitBtn\",\n        style: submitBtnStyle,\n        type: \"submit\",\n        children: \"Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"P0uk7fBfdJQ+wiciNIupfoiAab8=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/신이종/Desktop/Univ/OneDrive/2021. 1학기/fxsite/fxweb/src/components/Login.tsx"],"names":["useState","Login","id","setId","pw","setPw","modal","document","querySelector","login","submitBtnStyle","color","background","padding","border","borderRadius","fontSize","lineHeight","xBtnStyle","onIDChange","e","target","value","onPasswordChange","onXClicked","preventDefault","classList","toggle","onSubmit"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\n// import { SERVERURL, SERVERPORT } from './Constants';\r\n// import axios from 'axios';\r\n\r\n// 백엔드와 교환할 데이터에 대한 정보를 인터페이스에 즉각 메모하세요.\r\n// 이것 또한 협업과정에서 타입스크립트가 가져다 주는 큰 장점들 중 하나입니다.\r\n// interface User { // 받는 유저 정보의 스키마\r\n\r\n// }\r\n\r\n// interface UserDTO { // 보내는 유저 정보의 스키마\r\n\r\n// }\r\n\r\nconst Login = (): JSX.Element => {\r\n\r\n    // destructuring에 따른 Typing 방법\r\n    let [id, setId]: [ id: string, setId: Function] = useState('');\r\n    let [pw, setPw]: [ pw: string, setPw: Function] = useState('');\r\n\r\n    // Union Type, | 를 사용하여 이 타입 중 하나일 것임을 명시\r\n    // HTMLElement의 경우 로딩 시점에 따라 null로 인식될 수 있으므로 null까지 포함해야 함\r\n    const modal: HTMLElement | null = document.querySelector(\"#modal\");\r\n    const login: HTMLElement | null = document.querySelector(\"#login\");\r\n\r\n    // 굳이 Inline Style을 지정한다면 그나마 좀 더 괜찮게 하는 방법입니다.\r\n    const submitBtnStyle = {  // 이런 객체엔 Typing하지 않아도 됩니다.\r\n        color: \"white\",\r\n        background: \"purple\",\r\n        padding: \".375rem .75rem\",\r\n        border: \"1px solid purple\",\r\n        borderRadius: \".25rem\",\r\n        fontSize: \"1rem\",\r\n        lineHeight: 1.5\r\n    };\r\n\r\n    const xBtnStyle = {  // React Native에서 이 방식을 사용합니다.\r\n        color: \"white\",\r\n        background: \"#1E1F21\",\r\n        padding: \".125rem .5rem\",\r\n        borderRadius: \".25rem\",\r\n        fontSize: \"1rem\",\r\n        lineHeight: 1.5\r\n    };\r\n\r\n    // 객체의 타입을 다 외울 필요 없습니다.\r\n    // 아래의 onIDChange를 예로 들면, onIDChange 이벤트가 걸려있는\r\n    // DOM에 마우스를 올려 해당 객체의 타입이 무엇인지 확인하면 쉽게 알 수 있습니다.\r\n\r\n    const onIDChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setId(e.target.value)\r\n    };\r\n\r\n    const onPasswordChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setPw(e.target.value)\r\n    };\r\n\r\n    const onXClicked = (e: React.MouseEvent<HTMLButtonElement>): void => {\r\n        e.preventDefault();\r\n        modal?.classList.toggle(\"show\");\r\n        login?.classList.toggle(\"show\");\r\n    };\r\n\r\n    // axios를 이렇게 사용하는 방법도 좋지만,\r\n    // axios를 좀 더 날렵하게 custom하는 방법도 요긴하게 사용될 수 있습니다.\r\n    // 소규모 프로젝트에선 상관 없지만, 큰 프로젝트에선 DRY한 코드를 위해\r\n    // axios를 Hook처럼 커스텀하여 사용할 수 있습니다.\r\n    // const requsetUserInfo = async (UserDTO: UserDTO) => {\r\n    //     // axios를 하단 코드처럼 사용하지 않고\r\n    //     // axios({ method: 'post', ... }) 처럼 사용해도 좋습니다.\r\n    //     const res: User = \r\n    //         await axios.get(`${SERVERURL}:${SERVERPORT}`, UserDTO);\r\n    //     return res;\r\n    // }\r\n\r\n    // 패키지에 axios 설치 되어 있습니다. axios 사용하세요.\r\n    // const onSubmit = (e: React.ChangeEvent<HTMLFormElement>): void => {\r\n    //     e.preventDefault();\r\n    //     const UserDTO: UserDTO = {\r\n    //         id,\r\n    //         pw\r\n    //     }\r\n    //     const res = requsetUserInfo(UserDTO);\r\n    //     console.log(res);\r\n    // }\r\n\r\n    const onSubmit = (e: React.ChangeEvent<HTMLFormElement>): void => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div id=\"login-wrapper\">\r\n            <form action=\"\" method=\"post\" onSubmit={onSubmit}>\r\n                <p id=\"login-header\" className=\"login-p\">로그인</p>\r\n                <button onClick={onXClicked} style={xBtnStyle} id=\"login-X_Btn\">X</button>\r\n                <p id=\"login-id\" className=\"login-p\">ID</p>\r\n                <input type=\"text\" value={id} className=\"login-input\" onChange={onIDChange} />    \r\n                <p id=\"login-pw\" className=\"login-p\">Password</p>\r\n                <input type=\"password\" name=\"\" id=\"\" className=\"login-input\" value={pw} onChange={onPasswordChange} />\r\n                <button id=\"login-submitBtn\" style={submitBtnStyle} type=\"submit\">Sign In</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}